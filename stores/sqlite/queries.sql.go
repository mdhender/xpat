// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlite

import (
	"context"
	"database/sql"
)

const completeSubTasks = `-- name: CompleteSubTasks :exec
UPDATE tasks
SET completed    = strftime('%s', 'now'),
    completed_by = ?1,
    modified     = strftime('%s', 'now'),
    modified_by  = ?2
WHERE parent_id = ?3
`

type CompleteSubTasksParams struct {
	CompletedBy sql.NullInt64
	ModifiedBy  sql.NullInt64
	TaskID      sql.NullInt64
}

// --------------------------------------------------------------------------
// CompleteSubTasks marks all sub-tasks of a given task as completed.
func (q *Queries) CompleteSubTasks(ctx context.Context, arg CompleteSubTasksParams) error {
	_, err := q.db.ExecContext(ctx, completeSubTasks, arg.CompletedBy, arg.ModifiedBy, arg.TaskID)
	return err
}

const completeTask = `-- name: CompleteTask :exec
UPDATE tasks
SET completed    = strftime('%s', 'now'),
    completed_by = ?1,
    modified     = strftime('%s', 'now'),
    modified_by  = ?2
WHERE id = ?3
`

type CompleteTaskParams struct {
	CompletedBy sql.NullInt64
	ModifiedBy  sql.NullInt64
	TaskID      int64
}

// --------------------------------------------------------------------------
// CompleteTask marks a task as completed.
func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, completeTask, arg.CompletedBy, arg.ModifiedBy, arg.TaskID)
	return err
}

const createSubTask = `-- name: CreateSubTask :one
INSERT INTO tasks (title, description, due_date, assigned_to, parent_id,
                   created, created_by)
VALUES (?1, ?2, ?3, ?4, ?5,
        strftime('%s', 'now'), ?6)
RETURNING id
`

type CreateSubTaskParams struct {
	Title       string
	Description sql.NullString
	DueDate     sql.NullTime
	AssignedTo  sql.NullInt64
	TaskID      sql.NullInt64
	CreatedBy   int64
}

// --------------------------------------------------------------------------
// CreateSubTask creates a new Task as a sub-task of an existing Task.
func (q *Queries) CreateSubTask(ctx context.Context, arg CreateSubTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSubTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.AssignedTo,
		arg.TaskID,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, due_date, assigned_to, created, created_by)
VALUES (?1, ?2, ?3, ?4, strftime('%s', 'now'), ?5)
RETURNING id
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	DueDate     sql.NullTime
	AssignedTo  sql.NullInt64
	CreatedBy   int64
}

// --------------------------------------------------------------------------
// CreateTask creates a new Task.
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.AssignedTo,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, created_by)
VALUES (?1, ?2, ?3)
RETURNING id
`

type CreateUserParams struct {
	Name      string
	Email     string
	CreatedBy int64
}

// --------------------------------------------------------------------------
// CreateUser creates a new User.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.CreatedBy)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :exec

INSERT INTO users (id, name, email, created_by)
VALUES (?1, ?2, ?3, ?4)
`

type InsertUserParams struct {
	ID        int64
	Name      string
	Email     string
	CreatedBy int64
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// --------------------------------------------------------------------------
// InsertUser inserts a new User.
// Since it allows the caller to specify the ID, it should only be used by system tasks.
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.CreatedBy,
	)
	return err
}
